| This gives us the same output as 1:20. However, let's say that instead we want a
| vector of numbers ranging from 0 to 10, incremented by 0.5. seq(0, 10, by=0.5)
| does just that. Try it out.

> seq(0, 10, by=0.5)
 [1]  0.0  0.5  1.0  1.5  2.0  2.5  3.0  3.5  4.0  4.5  5.0  5.5  6.0  6.5  7.0  7.5
[17]  8.0  8.5  9.0  9.5 10.0

| You nailed it! Good job!

  |=====================================                                     |  50%

| Or maybe we don't care what the increment is and we just want a sequence of 30
| numbers between 5 and 10. seq(5, 10, length=30) does the trick. Give it shot now
| and store the result in a new variable called my_seq.

> my_seq <- seq(5, 10, length=30)

| That's correct!

  |========================================                                  |  55%

| To confirm that my_seq has length 30, we can use the length() function. Try it
| now.

> length(my_seq)
[1] 30

| You got it right!

  |============================================                              |  59%

| Let's pretend we don't know the length of my_seq, but we want to generate a
| sequence of integers from 1 to N, where N represents the length of the my_seq
| vector. In other words, we want a new vector (1, 2, 3, ...) that is the same
| length as my_seq.

...

  |===============================================                           |  64%

| There are several ways we could do this. One possibility is to combine the `:`
| operator and the length() function like this: 1:length(my_seq). Give that a try.

> 1:length(my_seq)
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26
[27] 27 28 29 30

| Nice work!

  |==================================================                        |  68%

| Another option is to use seq(along = my_seq). Give that a try.

> seq(along = my_seq)
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26
[27] 27 28 29 30

| You are doing so well!

  |======================================================                    |  73%

| However, as is the case with many common tasks, R has a separate built-in
| function for this purpose called seq_along(). Type seq_along(my_seq) to see it in
| action.

> seq_along(my_seq)
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26
[27] 27 28 29 30

| Excellent job!

  |=========================================================                 |  77%

| There are often several approaches to solving the same problem, particularly in
| R. Simple approaches that involve less typing are generally best. It's also
| important for your code to be readable, so that you and others can figure out
| what's going on without too much hassle.

...

  |=============================================================             |  82%

| If R has a built-in function for a particular task, it's likely that function is
| highly optimized for that purpose and is your best option. As you become a more
| advanced R programmer, you'll design your own functions to perform tasks when
| there are no better options. We'll explore writing your own functions in future
| lessons.

...

  |================================================================          |  86%

| One more function related to creating sequences of numbers is rep(), which stands
| for 'replicate'. Let's look at a few uses.

...

  |===================================================================       |  91%

| If we're interested in creating a vector that contains 40 zeros, we can use
| rep(0, times = 40). Try it out.

> rep(0, times = 40)
 [1] 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0

| That's correct!

  |=======================================================================   |  95%

| If instead we want our vector to contain 10 repetitions of the vector (0, 1, 2),
| we can do rep(c(0, 1, 2), times = 10). Go ahead.

> rep(c(0, 1, 2), times = 10)
 [1] 0 1 2 0 1 2 0 1 2 0 1 2 0 1 2 0 1 2 0 1 2 0 1 2 0 1 2 0 1 2

| You are doing so well!

  |==========================================================================| 100%

| Finally, let's say that rather than repeating the vector (0, 1, 2) over and over
| again, we want our vector to contain 10 zeros, then 10 ones, then 10 twos. We can
| do this with the `each` argument. Try rep(c(0, 1, 2), each = 10).

> 
> rep(c(0, 1, 2), each = 10)
 [1] 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2

| That's a job well done!

| Are you currently enrolled in the Coursera course associated with this lesson?

1: Yes
2: No

Selection: 1

| Would you like me to notify Coursera that you've completed this lesson? If so,
| I'll need to get some more info from you.

1: Yes
2: No
3: Maybe later

Selection: 1

| Is the following information correct?

Course ID: rprog-003
Submission login (email): vergili@cern.ch
Submission password: buCkeekh5s

1: Yes, go ahead!
2: No, I need to change something.

Selection: 1

| I'll try to tell Coursera you've completed this lesson now.

| Great work!

| I've notified Coursera that you have completed rprog-003, Sequences_of_Numbers.

| You've reached the end of this lesson! Returning to the main menu...

| Would you like to continue with one of these lessons?

1: R Programming Subsetting Vectors
2: R Programming Vectors
3: No. Let me start something new.

Selection: 1



| I've created for you a vector called x that contains a random ordering of 20
| numbers (from a standard normal distribution) and 20 NAs. Type x now to see what
| it looks like.

> 
> x
 [1]  1.6413443         NA         NA         NA         NA         NA         NA
 [8]  0.8116561  0.4852732         NA  1.1239878  0.2065542 -1.1752384         NA
[15]         NA  0.3214190 -0.3127502         NA         NA         NA  0.4403477
[22] -1.8263699         NA -1.1119378         NA         NA         NA         NA
[29]         NA  0.3755194  0.1613365 -0.7066253         NA  0.5076149  1.5353029
[36]  1.0632891  1.7844852 -1.7986263  0.6879575         NA

| Keep up the great work!

  |======                                                                    |   8%

| The way you tell R that you want to select some particular elements (i.e. a
| 'subset') from a vector is by placing an 'index vector' in square brackets
| immediately following the name of the vector.

...

  |========                                                                  |  11%

| For a simple example, try x[1:10] to view the first ten elements of x.

> x[1:10]
 [1] 1.6413443        NA        NA        NA        NA        NA        NA 0.8116561
 [9] 0.4852732        NA

| You are amazing!

  |==========                                                                |  13%

| Index vectors come in four different flavors -- logical vectors, vectors of
| positive integers, vectors of negative integers, and vectors of character strings
| -- each of which we'll cover in this lesson.

...x[1,]

  |============                                                              |  16%

| Let's start by indexing with logical vectors. One common scenario when working
| with real-world data is that we want to extract all elements of a vector that are
| not NA (i.e. missing data). Recall that is.na(x) yields a vector of logical
| values the same length as x, with TRUEs corresponding to NA values in x and
| FALSEs corresponding to non-NA values in x.

...

  |==============                                                            |  18%

| What do you think x[is.na(x)] will give you?

1: A vector of all NAs
2: A vector of length 0
3: A vector of TRUEs and FALSEs
4: A vector with no NAs

Selection: 1

| Nice work!

  |================                                                          |  21%

| Prove it to yourself by typing x[is.na(x)].

> x[is.na(x)]
 [1] NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA

| That's a job well done!

  |==================                                                        |  24%

| Recall that `!` gives us the negation of a logical expression, so !is.na(x) can
| be read as 'is not NA'. Therefore, if we want to create a vector called y that
| contains all of the non-NA values from x, we can use y <- x[!is.na(x)]. Give it a
| try.

> y <- x[!is.na(x)]

| That's correct!

  |===================                                                       |  26%

| Print y to the console.

> y
 [1]  1.6413443  0.8116561  0.4852732  1.1239878  0.2065542 -1.1752384  0.3214190
 [8] -0.3127502  0.4403477 -1.8263699 -1.1119378  0.3755194  0.1613365 -0.7066253
[15]  0.5076149  1.5353029  1.0632891  1.7844852 -1.7986263  0.6879575

| You are amazing!

  |=====================                                                     |  29%

| Now that we've isolated the non-missing values of x and put them in y, we can
| subset y as we please.

...

  |=======================                                                   |  32%

| Recall that the expression y > 0 will give us a vector of logical values the same
| length as y, with TRUEs corresponding to values of y that are greater than zero
| and FALSEs corresponding to values of y that are less than or equal to zero. What
| do you think y[y > 0] will give you?

1: A vector of all the negative elements of y
2: A vector of TRUEs and FALSEs
3: A vector of all the postive elements of y
4: A vector of length 0
5: A vector of all NAs

Selection: 3

| That's a job well done!

  |=========================                                                 |  34%

| Type y[y > 0] to see that we get all of the positive elements of y, which are
| also the positive elements of our original vector x.

> y[y > 0]
 [1] 1.6413443 0.8116561 0.4852732 1.1239878 0.2065542 0.3214190 0.4403477 0.3755194
 [9] 0.1613365 0.5076149 1.5353029 1.0632891 1.7844852 0.6879575

| Nice work!

  |===========================                                               |  37%

| You might wonder why we didn't just start with x[x > 0] to isolate the positive
| elements of x. Try that now to see why.

> x[x > 0]
 [1] 1.6413443        NA        NA        NA        NA        NA        NA 0.8116561
 [9] 0.4852732        NA 1.1239878 0.2065542        NA        NA 0.3214190        NA
[17]        NA        NA 0.4403477        NA        NA        NA        NA        NA
[25]        NA 0.3755194 0.1613365        NA 0.5076149 1.5353029 1.0632891 1.7844852
[33] 0.6879575        NA

| You are doing so well!

  |=============================                                             |  39%

| Since NA is not a value, but rather a placeholder for an unknown quantity, the
| expression NA > 0 evaluates to NA. Hence we get a bunch of NAs mixed in with our
| positive numbers when we do this.

...

  |===============================                                           |  42%

| Combining our knowledge of logical operators with our new knowledge of
| subsetting, we could do this -- x[!is.na(x) & x > 0]. Try it out.

> x[!is.na(x) & x > 0]
 [1] 1.6413443 0.8116561 0.4852732 1.1239878 0.2065542 0.3214190 0.4403477 0.3755194
 [9] 0.1613365 0.5076149 1.5353029 1.0632891 1.7844852 0.6879575

| That's a job well done!

  |=================================                                         |  45%

| In this case, we request only values of x that are both non-missing AND greater
| than zero.

...

  |===================================                                       |  47%

| I've already shown you how to subset just the first ten values of x using
| x[1:10]. In this case, we're providing a vector of positive integers inside of
| the square brackets, which tells R to return only the elements of x numbered 1
| through 10.

...

  |=====================================                                     |  50%

| Many programming languages use what's called 'zero-based indexing', which means
| that the first element of a vector is considered element 0. R uses 'one-based
| indexing', which (you guessed it!) means the first element of a vector is
| considered element 1.

...

  |=======================================                                   |  53%

| Can you figure out how we'd subset the 3rd, 5th, and 7th elements of x? Hint --
| Use the c() function to specify the element numbers as a numeric vector.

> x[c(3,5,7)]
[1] NA NA NA

| You are doing so well!

  |=========================================                                 |  55%

| It's important that when using integer vectors to subset our vector x, we stick
| with the set of indexes {1, 2, ..., 40} since x only has 40 elements. What
| happens if we ask for the zeroth element of x (i.e. x[0])? Give it a try.

> x[0]
numeric(0)

| You are really on a roll!

  |===========================================                               |  58%

| As you might expect, we get nothing useful. Unfortunately, R doesn't prevent us
| from doing this. What if we ask for the 3000th element of x? Try it out.

> x[300]
[1] NA

| That's not exactly what I'm looking for. Try again. Or, type info() for more
| options.

| Request the 3000th element of x (which does not exist) with x[3000].

> x[c(300)]
[1] NA

| Nice try, but that's not exactly what I was hoping for. Try again. Or, type
| info() for more options.

| Request the 3000th element of x (which does not exist) with x[3000].

> x[3000]
[1] NA

| Keep up the great work!

  |=============================================                             |  61%

| Again, nothing useful, but R doesn't prevent us from asking for it. This should
| be a cautionary tale. You should always make sure that what you are asking for is
| within the bounds of the vector you're working with.

...

  |===============================================                           |  63%

| What if we're interested in all elements of x EXCEPT the 2nd and 10th? It would
| be pretty tedious to construct a vector containing all numbers 1 through 40
| EXCEPT 2 and 10.

...

  |=================================================                         |  66%

| Luckily, R accepts negative integer indexes. Whereas x[c(2, 10)] gives us ONLY
| the 2nd and 10th elements of x, x[c(-2, -10)] gives us all elements of x EXCEPT
| for the 2nd and 10 elements.  Try x[c(-2, -10)] now to see this.

> x[c(-2, -10)]
 [1]  1.6413443         NA         NA         NA         NA         NA  0.8116561
 [8]  0.4852732  1.1239878  0.2065542 -1.1752384         NA         NA  0.3214190
[15] -0.3127502         NA         NA         NA  0.4403477 -1.8263699         NA
[22] -1.1119378         NA         NA         NA         NA         NA  0.3755194
[29]  0.1613365 -0.7066253         NA  0.5076149  1.5353029  1.0632891  1.7844852
[36] -1.7986263  0.6879575         NA

| Great job!

  |===================================================                       |  68%

| A shorthand way of specifying multiple negative numbers is to put the negative
| sign out in front of the vector of positive numbers. Type x[-c(2, 10)] to get the
| exact same result.

> x[-c(2, 10)]
 [1]  1.6413443         NA         NA         NA         NA         NA  0.8116561
 [8]  0.4852732  1.1239878  0.2065542 -1.1752384         NA         NA  0.3214190
[15] -0.3127502         NA         NA         NA  0.4403477 -1.8263699         NA
[22] -1.1119378         NA         NA         NA         NA         NA  0.3755194
[29]  0.1613365 -0.7066253         NA  0.5076149  1.5353029  1.0632891  1.7844852
[36] -1.7986263  0.6879575         NA

| That's a job well done!

  |=====================================================                     |  71%

| So far, we've covered three types of index vectors -- logical, postive integer,
| and negative integer. The only remaining type requires us to introduce the
| concept of 'named' elements.

...

  |=======================================================                   |  74%

| Create a numeric vector with three named elements using vect <- c(foo = 11, bar =
| 2, norf = NA).

> vect <- c(foo = 11, bar = 2, norf = NA)

| Great job!

  |========================================================                  |  76%

| When we print vect to the console, you'll see that each element has a name. Try
| it out.

> vect
 foo  bar norf 
  11    2   NA 

| You got it right!

  |==========================================================                |  79%

| We can also get the names of vect by passing vect as an argument to the names()
| function. Give that a try.

> names(vect)
[1] "foo"  "bar"  "norf"

| You are really on a roll!

  |============================================================              |  82%

| Alternatively, we can create an unnamed vector vect2 with c(11, 2, NA). Do that
| now.

> vect2 <- c(11, 2, NA)

| Nice work!

  |==============================================================            |  84%

| Then, we can add the `names` attribute to vect2 after the fact with names(vect2)
| <- c("foo", "bar", "norf"). Go ahead.

> names(vect2) <- c("foo", "bar", "norf")

| You nailed it! Good job!

  |================================================================          |  87%

| Now, let's check that vect and vect2 are the same by passing them as arguments to
| the identical() function.

> vect2
 foo  bar norf 
  11    2   NA 

| Nice try, but that's not exactly what I was hoping for. Try again. Or, type
| info() for more options.

| The identical() function tells us if its first two arguments are, well,
| identical.

> identical(vect,vect2)
[1] TRUE

| That's correct!

  |==================================================================        |  89%

| Indeed, vect and vect2 are identical named vectors.

...

  |====================================================================      |  92%

| Now, back to the matter of subsetting a vector by named elements. Which of the
| following commands do you think would give us the second element of vect?

1: vect["2"]
2: vect["bar"]
3: vect[bar]

Selection: 2

| You are amazing!

  |======================================================================    |  95%

| Now, try it out.

> vect["bar"]
bar 
  2 

| You are really on a roll!

  |========================================================================  |  97%

| Likewise, we can specify a vector of names with vect[c("foo", "bar")]. Try it
| out.

> vect[c("foo", "bar")]
foo bar 
 11   2 

| You are amazing!

  |==========================================================================| 100%

| Now you know all four methods of subsetting data from vectors. Different
| approaches are best in different scenarios and when in doubt, try it out!

...

| Are you currently enrolled in the Coursera course associated with this lesson?

1: Yes
2: No

Selection: 1

| Would you like me to notify Coursera that you've completed this lesson? If so,
| I'll need to get some more info from you.

1: Yes
2: No
3: Maybe later

Selection: 1

| Is the following information correct?

Course ID: rprog-003
Submission login (email): vergili@cern.ch
Submission password: buCkeekh5s

1: Yes, go ahead!
2: No, I need to change something.

Selection: 1

| I'll try to tell Coursera you've completed this lesson now.

| Great work!

| I've notified Coursera that you have completed rprog-003, Subsetting_Vectors.

| You've reached the end of this lesson! Returning to the main menu...

| Would you like to continue with one of these lessons?

1: R Programming Vectors
2: No. Let me start something new.

Selection: 1



| First, create a numeric vector num_vect that contains the values 0.5, 55, -10,
| and 6.

> num_vect <- c(0.5,55,-10,6)

| Nice work!

  |==========                                                                |  14%

| Now, create a variable called tf that gets the result of num_vect < 1, which is
| read as 'num_vect is less than 1'.

> tf <- num_vect[num_vect<1]

| That's not exactly what I'm looking for. Try again. Or, type info() for more
| options.

| Use tf <- num_vect < 1 to assign the result of num_vect < 1 to a variable called
| tf.

> tf <- num_vect < 1

| You are doing so well!

  |============                                                              |  16%

| What do you think tf will look like?

1: a single logical value
2: a vector of 4 logical values

Selection: 1

| That's not exactly what I'm looking for. Try again.

| Remember our lesson on vector arithmetic? The theme was that R performs many
| operations on an element-by-element basis. We called these 'vectorized'
| operations.

1: a vector of 4 logical values
2: a single logical value

Selection: 1

| You got it!

  |==============                                                            |  19%

| Print the contents of tf now.

> tf
[1]   0.5 -10.0

| You are doing so well!

  |================                                                          |  22%

| The statement num_vect < 1 is a condition and tf tells us whether each
| corresponding element of our numeric vector num_vect satisfies this condition.

...

  |==================                                                        |  24%

| The first element of num_vect is 0.5, which is less than 1 and therefore the
| statement 0.5 < 1 is TRUE. The second element of num_vect is 55, which is greater
| than 1, so the statement 55 < 1 is FALSE. The same logic applies for the third
| and forth elements.

...

  |====================                                                      |  27%

| Let's try another. Type num_vect >= 6 without assigning the result to a new
| variable.

> num_vect >= 6
[1] FALSE  TRUE FALSE  TRUE

| You are doing so well!

  |======================                                                    |  30%

| This time, we are asking whether each individual element of num_vect is greater
| than OR equal to 6. Since only 55 and 6 are greater than or equal to 6, the
| second and forth elements of the result are TRUE and the first and third elements
| are FALSE.

...

  |========================                                                  |  32%

| The `<` and `>=` symbols in these examples are called 'logical operators'. Other
| logical operators include `>`, `<=`, `==` for exact equality, and `!=` for
| inequality.

...

  |==========================                                                |  35%

| If we have two logical expressions, A and B, we can ask whether at least one is
| TRUE with A | B (logical 'or' a.k.a. 'union') or whether they are both TRUE with
| A & B (logical 'and' a.k.a. 'intersection'). Lastly, !A is the negation of A and
| is TRUE when A is FALSE and vice versa.

...

  |============================                                              |  38%

| It's a good idea to spend some time playing around with various combinations of
| these logical operators until you get comfortable with their use. We'll do a few
| examples here to get you started.

...

  |==============================                                            |  41%

| Try your best to predict the result of each of the following statements. You can
| use pencil and paper to work them out if it's helpful. If you get stuck, just
| guess and you've got a 50% chance of getting the right answer!

...

  |================================                                          |  43%

| (3 > 5) & (4 == 4)

1: TRUE
2: FALSE

Selection: 2

| Keep up the great work!

  |==================================                                        |  46%

| (TRUE == TRUE) | (TRUE == FALSE)

1: FALSE
2: TRUE

Selection: 2

| That's correct!

  |====================================                                      |  49%

| ((111 >= 111) | !(TRUE)) & ((4 + 1) == 5)

1: FALSE
2: TRUE

Selection: 2

| Great job!

  |======================================                                    |  51%

| Don't worry if you found these to be tricky. They're supposed to be. Working with
| logical statements in R takes practice, but your efforts will be rewarded in
| future lessons (e.g. subsetting and control structures).

...

  |========================================                                  |  54%

| Character vectors are also very common in R. Double quotes are used to
| distinguish character objects, as in the following example.

...

  |==========================================                                |  57%

| Create a character vector that contains the following words: "My", "name", "is".
| Remember to enclose each word in it's own set of double quotes, so that R knows
| they are character strings. Store the vector in a variable called my_char.

> my_char <- c("My", "name", "is")

| That's correct!

  |============================================                              |  59%

| Print the contents of my_char to see what it looks like.

> my_char
[1] "My"   "name" "is"  

| That's correct!

  |==============================================                            |  62%

| Right now, my_char is a character vector of length 3. Let's say we want to join
| the elements of my_char together into one continuous character string (i.e. a
| character vector of length 1). We can do this using the paste() function.

...

  |================================================                          |  65%

| Type paste(my_char, collapse = " ") now. Make sure there's a space between the
| double quotes in the `collapse` argument. You'll see why in a second.

> paste(my_char, collapse = " ")
[1] "My name is"

| You got it right!

  |==================================================                        |  68%

| The `collapse` argument to the paste() function tells R that when we join
| together the elements of the my_char character vector, we'd like to separate them
| with single spaces.

...

  |====================================================                      |  70%

| It seems that we're missing something.... Ah, yes! Your name!

...

  |======================================================                    |  73%

| To add (or 'concatenate') your name to the end of my_char, use the c() function
| like this: c(my_char, "your_name_here"). Place your name in double quotes where
| I've put "your_name_here". Try it now, storing the result in a new variable
| called my_name.

> my_name <- c(my_char, "Mehmet")

| You are doing so well!

  |========================================================                  |  76%

| Take a look at the contents of my_name.

> my_name
[1] "My"     "name"   "is"     "Mehmet"

| You are amazing!

  |==========================================================                |  78%

| Now, use the paste() function once more to join the words in my_name together
| into a single character string. Don't forget to say collapse = " "!

> paste(my_name, collapse = " ")
[1] "My name is Mehmet"

| That's a job well done!

  |============================================================              |  81%

| In this example, we used the paste() function to collapse the elements of a
| single character vector. paste() can also be used to join the elements of
| multiple character vectors.

...

  |==============================================================            |  84%

| In the simplest case, we can join two character vectors that are each of length 1
| (i.e. join two words). Try paste("Hello", "world!", sep = " "), where the `sep`
| argument tells R that we want to separate the joined elements with a single
| space.

> paste("Hello", "world!", sep = " ")
[1] "Hello world!"

| You got it!

  |================================================================          |  86%

| For a slightly more complicated example, we can join two vectors, each of length
| 3. Use paste() to join the integer vector 1:3 with the character vector c("X",
| "Y", "Z"). This time, use sep = "" to leave no space between the joined elements.

> paste(1:^3, c("X","Y","Z"))
Error: unexpected '^' in "paste(1:^"
> paste(1:3, c("X","Y","Z"))
[1] "1 X" "2 Y" "3 Z"

| That's not the answer I was looking for, but try again. Or, type info() for more
| options.

| Use paste(1:3, c("X", "Y", "Z"), sep = "") to see what happens when we join two
| vectors of equal length using paste().

> paste(1:3, c("X", "Y", "Z"), sep = "")
[1] "1X" "2Y" "3Z"

| Nice work!

  |==================================================================        |  89%

| What do you think will happen if our vectors are of different length? (Hint: we
| talked about this in a previous lesson.)

...

  |====================================================================      |  92%

| Vector recycling! Try paste(LETTERS, 1:4, sep = "-"), where LETTERS is a
| predefined variable in R containing a character vector of all 26 letters in the
| English alphabet.

> paste(LETTERS, 1:4, sep = "-")
 [1] "A-1" "B-2" "C-3" "D-4" "E-1" "F-2" "G-3" "H-4" "I-1" "J-2" "K-3" "L-4" "M-1"
[14] "N-2" "O-3" "P-4" "Q-1" "R-2" "S-3" "T-4" "U-1" "V-2" "W-3" "X-4" "Y-1" "Z-2"

| Excellent job!

  |======================================================================    |  95%

| Since the character vector LETTERS is longer than the numeric vector 1:4, R
| simply recycles, or repeats, 1:4 until it matches the length of LETTERS.

...

  |========================================================================  |  97%

| Also worth noting is that the numeric vector 1:4 gets 'coerced' into a character
| vector by the paste() function.

...

  |==========================================================================| 100%

| We'll discuss coercion in another lesson, but all it really means that the
| numbers 1, 2, 3, and 4 in the output above are no longer numbers to R, but rather
| characters "1", "2", "3", and "4".

...

| Are you currently enrolled in the Coursera course associated with this lesson?

1: Yes
2: No

Selection: 1

| Would you like me to notify Coursera that you've completed this lesson? If so,
| I'll need to get some more info from you.

1: Yes
2: No
3: Maybe later

Selection: 1

| Is the following information correct?

Course ID: rprog-003
Submission login (email): vergili@cern.ch
Submission password: buCkeekh5s

1: Yes, go ahead!
2: No, I need to change something.

Selection: 1

| I'll try to tell Coursera you've completed this lesson now.

| Great work!

| I've notified Coursera that you have completed rprog-003, Vectors.

| You've reached the end of this lesson! Returning to the main menu...

| Please choose a course, or type 0 to exit swirl.

1: R Programming
2: Take me to the swirl course repository!