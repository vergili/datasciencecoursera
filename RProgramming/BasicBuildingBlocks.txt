> library(swirl)

| Hi! Type swirl() when you are ready to begin.

> swirl()

| Welcome to swirl! Please sign in. If you've been here before, use the same name
| as you did then. If you are new, call yourself something unique.

What shall I call you? mehmet

| Please choose a course, or type 0 to exit swirl.

1: R Programming
2: Take me to the swirl course repository!

Selection: 1

| Please choose a lesson, or type 0 to return to course menu.

1: Basic Building Blocks
2: Sequences of Numbers
3: Vectors
4: Missing Values
5: Subsetting Vectors
6: Matrices and Data Frames

Selection: 1

  |                                                                          |   0%

| In this lesson, we will explore some basic building blocks of the R programming
| language.

...

  |==                                                                        |   3%

| If at any point you'd like more information on a particular topic related to R,
| you can type help.start() at the prompt, which will open a menu of resources
| (either within RStudio or your default web browser, depending on your setup).
| Alternatively, a simple web search often yields the answer you're looking for.

...

  |=====                                                                     |   6%

| In it's simplest form, R can be used as an interactive calculator. Type 5 + 7 and
| press Enter.

> 
> swirl()

| Welcome to swirl! Please sign in. If you've been here before, use the same name
| as you did then. If you are new, call yourself something unique.

What shall I call you? mehmet

| Would you like to continue with one of these lessons?

1: R Programming Basic Building Blocks
2: No. Let me start something new.

Selection: 1



| In it's simplest form, R can be used as an interactive calculator. Type 5 + 7 and
| press Enter.

> 
> 
> swirl()

| Welcome to swirl! Please sign in. If you've been here before, use the same name
| as you did then. If you are new, call yourself something unique.

What shall I call you? mehmet

| Would you like to continue with one of these lessons?

1: R Programming Basic Building Blocks
2: No. Let me start something new.

Selection: 2

| Please choose a course, or type 0 to exit swirl.

1: R Programming
2: Take me to the swirl course repository!

Selection: 1

| Please choose a lesson, or type 0 to return to course menu.

1: Basic Building Blocks
2: Sequences of Numbers
3: Vectors
4: Missing Values
5: Subsetting Vectors
6: Matrices and Data Frames

Selection: 2

  |                                                                          |   0%

| In this lesson, you'll learn how to create sequences of numbers in R.

...

  |===                                                                       |   5%

| The simplest way to create a sequence of numbers in R is by using the `:`
| operator. Type 1:20 to see how it works.

> 
> swirl()

| Welcome to swirl! Please sign in. If you've been here before, use the same name
| as you did then. If you are new, call yourself something unique.

What shall I call you? mehmet

| Would you like to continue with one of these lessons?

1: R Programming Basic Building Blocks
2: R Programming Sequences of Numbers
3: No. Let me start something new.

Selection: 1



| In it's simplest form, R can be used as an interactive calculator. Type 5 + 7 and
| press Enter.

> swirl()

| Welcome to swirl! Please sign in. If you've been here before, use the same name
| as you did then. If you are new, call yourself something unique.

What shall I call you? mehmet

| Would you like to continue with one of these lessons?

1: R Programming Basic Building Blocks
2: R Programming Sequences of Numbers
3: No. Let me start something new.

Selection: 3

| Please choose a course, or type 0 to exit swirl.

1: R Programming
2: Take me to the swirl course repository!

Selection: 1

| Please choose a lesson, or type 0 to return to course menu.

1: Basic Building Blocks
2: Sequences of Numbers
3: Vectors
4: Missing Values
5: Subsetting Vectors
6: Matrices and Data Frames

Selection: 3

  |                                                                          |   0%

| The simplest and most common data structure in R is the vector.

...

  |==                                                                        |   3%

| Vectors come in two different flavors: atomic vectors and lists. An atomic vector
| contains exactly one data type, whereas a list may contain multiple data types.
| We'll explore atomic vectors further before we get to lists.

...

  |====                                                                      |   5%

| In previous lessons, we dealt entirely with numeric vectors, which are one type
| of atomic vector. Other types of atomic vectors include logical, character,
| integer, and complex. In this lesson, we'll take a closer look at logical and
| character vectors.

...

  |======                                                                    |   8%

| Logical vectors can contain the values TRUE, FALSE, and NA (for 'not available').
| These values are generated as the result of logical 'conditions'. Let's
| experiment with some simple conditions.

...

  |========                                                                  |  11%

| First, create a numeric vector num_vect that contains the values 0.5, 55, -10,
| and 6.

> setwd("D:/work/coursera")

| You're close...I can feel it! Try it again. Or, type info() for more options.

| Recall that the c() function is used for creating a vector. If you forget how to
| use it, use ?c to access the help file. Don't forget to assign the result to a
| new variable called num_vect.

> 
> 
> swirl()

| Welcome to swirl! Please sign in. If you've been here before, use the same name
| as you did then. If you are new, call yourself something unique.

What shall I call you? mehmet

| Would you like to continue with one of these lessons?

1: R Programming Basic Building Blocks
2: R Programming Sequences of Numbers
3: R Programming Vectors
4: No. Let me start something new.

Selection: 4

| Please choose a course, or type 0 to exit swirl.

1: R Programming
2: Take me to the swirl course repository!

Selection: 1

| Please choose a lesson, or type 0 to return to course menu.

1: Basic Building Blocks
2: Sequences of Numbers
3: Vectors
4: Missing Values
5: Subsetting Vectors
6: Matrices and Data Frames

Selection: 5

  |                                                                          |   0%

| In this lesson, we'll see how to extract elements from a vector based on some
| conditions that we specify.

...

  |==                                                                        |   3%

| For example, we may only be interested in the first 20 elements of a vector, or
| only the elements that are not NA, or only those that are positive or correspond
| to a specific variable of interest. By the end of this lesson, you'll know how to
| handle each of these scenarios.

...

  |====                                                                      |   5%

| I've created for you a vector called x that contains a random ordering of 20
| numbers (from a standard normal distribution) and 20 NAs. Type x now to see what
| it looks like.

> 
> 
> 
> swirl()

| Welcome to swirl! Please sign in. If you've been here before, use the same name
| as you did then. If you are new, call yourself something unique.

What shall I call you? mehmet

| Would you like to continue with one of these lessons?

1: R Programming Basic Building Blocks
2: R Programming Sequences of Numbers
3: R Programming Subsetting Vectors
4: R Programming Vectors
5: No. Let me start something new.

Selection: 5

| Please choose a course, or type 0 to exit swirl.

1: R Programming
2: Take me to the swirl course repository!

Selection: 1

| Please choose a lesson, or type 0 to return to course menu.

1: Basic Building Blocks
2: Sequences of Numbers
3: Vectors
4: Missing Values
5: Subsetting Vectors
6: Matrices and Data Frames

Selection: 6

  |                                                                          |   0%

| In this lesson, we'll cover matrices and data frames. Both represent
| 'rectangular' data types, meaning that they are used to store tabular data, with
| rows and columns.

...

  |==                                                                        |   3%

| The main difference, as you'll see, is that matrices can only contain a single
| class of data, while data frames can consist of many different classes of data.

...

  |====                                                                      |   6%

| Let's create a vector containing the numbers 1 through 20 using the `:` operator.
| Store the result in a variable called myVector.

> 
> 
> 
> setwd("D:/work/coursera")

| Not quite! Try again. Or, type info() for more options.

| You learned about the `:` operator in the lesson on sequences. If you wanted to
| create a vector containing the numbers 1, 2, and 3 (in that order), you could use
| either c(1, 2, 3) or 1:3. In this case, we want the numbers 1 through 20 stored
| in a variable called myVector.

> 
> 
> 
> swirl()

| Welcome to swirl! Please sign in. If you've been here before, use the same name
| as you did then. If you are new, call yourself something unique.

What shall I call you? mehmet

| Would you like to continue with one of these lessons?

1: R Programming Basic Building Blocks
2: R Programming Matrices and Data Frames
3: R Programming Sequences of Numbers
4: R Programming Subsetting Vectors
5: R Programming Vectors
6: No. Let me start something new.

Selection: 6

| Please choose a course, or type 0 to exit swirl.

1: R Programming
2: Take me to the swirl course repository!

Selection: 1

| Please choose a lesson, or type 0 to return to course menu.

1: Basic Building Blocks
2: Sequences of Numbers
3: Vectors
4: Missing Values
5: Subsetting Vectors
6: Matrices and Data Frames

Selection: 1

  |                                                                          |   0%

| In this lesson, we will explore some basic building blocks of the R programming
| language.

...

  |==                                                                        |   3%

| If at any point you'd like more information on a particular topic related to R,
| you can type help.start() at the prompt, which will open a menu of resources
| (either within RStudio or your default web browser, depending on your setup).
| Alternatively, a simple web search often yields the answer you're looking for.

...

  |=====                                                                     |   6%

| In it's simplest form, R can be used as an interactive calculator. Type 5 + 7 and
| press Enter.

> 
> swirl()

| Welcome to swirl! Please sign in. If you've been here before, use the same name
| as you did then. If you are new, call yourself something unique.

What shall I call you? mehmet

| Would you like to continue with one of these lessons?

1: R Programming Basic Building Blocks
2: R Programming Matrices and Data Frames
3: R Programming Sequences of Numbers
4: R Programming Subsetting Vectors
5: R Programming Vectors
6: No. Let me start something new.

Selection: 6

| Please choose a course, or type 0 to exit swirl.

1: R Programming
2: Take me to the swirl course repository!

Selection: 1

| Please choose a lesson, or type 0 to return to course menu.

1: Basic Building Blocks
2: Sequences of Numbers
3: Vectors
4: Missing Values
5: Subsetting Vectors
6: Matrices and Data Frames

Selection: 1

  |                                                                          |   0%

| In this lesson, we will explore some basic building blocks of the R programming
| language.

...

  |==                                                                        |   3%

| If at any point you'd like more information on a particular topic related to R,
| you can type help.start() at the prompt, which will open a menu of resources
| (either within RStudio or your default web browser, depending on your setup).
| Alternatively, a simple web search often yields the answer you're looking for.

...

  |=====                                                                     |   6%

| In it's simplest form, R can be used as an interactive calculator. Type 5 + 7 and
| press Enter.

> 5+7
[1] 12

| Great job!

  |=======                                                                   |   9%

| R simply prints the result of 12 by default. However, R is a programming language
| and often the reason we use a programming language as opposed to a calculator is
| to automate some process or avoid unnecessary repetition.

...

  |=========                                                                 |  12%

| In this case, we may want to use our result from above in a second calculation.
| Instead of retyping 5 + 7 every time we need it, we can just create a new
| variable that stores the result.

...

  |============                                                              |  16%

| The way you assign a value to a variable in R is by using the assignment
| operator, which is just a 'less than' symbol followed by a 'minus' sign. It looks
| like this: <-

...

  |==============                                                            |  19%

| Think of the assignment operator as an arrow. You are assigning the value on the
| right side of the arrow to the variable name on the left side of the arrow.

...

  |================                                                          |  22%

| To assign the result of 5 + 7 to a new variable called x, you type x <- 5 + 7.
| This can be read as 'x gets 5 plus 7'. Give it a try now.

> x<-5+7

| You got it right!

  |==================                                                        |  25%

| You'll notice that R did not print the result of 12 this time. When you use the
| assignment operator, R assumes that you don't want to see the result immediately,
| but rather that you intend to use the result for something else later on.

...

  |=====================                                                     |  28%

| To view the contents of the variable x, just type x and press Enter. Try it now.

> x
[1] 12

| You got it!

  |=======================                                                   |  31%

| Now, store the result of x - 3 in a new variable called y.

> y <- x-3

| That's correct!

  |=========================                                                 |  34%

| What is the value of y? Type y to find out.

> y
[1] 9

| You got it!

  |============================                                              |  38%

| Now, let's create a small collection of numbers called a vector. Any object that
| contains data is called a data structure and numeric vectors are the simplest
| type of data structure in R. In fact, even a single number is considered a vector
| of length one.

...

  |==============================                                            |  41%

| The easiest way to create a vector is with the c() function, which stands for
| 'concatenate' or 'combine'. To create a vector containing the numbers 1.1, 9, and
| 3.14, type c(1.1, 9, 3.14). Try it now and store the result in a variable called
| z.

> z <- c(1.1, 9, 3.14
+ )

| Nice work!

  |================================                                          |  44%

| Anytime you have questions about a particular function, you can access R's
| built-in help files via the `?` command. For example, if you want more
| information on the c() function, type ?c without the parentheses that normally
| follow a function name. Give it a try.

> ?c

| Nice work!

  |===================================                                       |  47%

| Type z to view it's contents. Notice that there are no commas separating the
| values in the output.

> z
[1] 1.10 9.00 3.14

| You got it right!

  |=====================================                                     |  50%

| You can combine vectors to make a new vector. Create a new vector that contains
| z, 555, then z again in that order. Don't assign this vector to a new variable,
| so that we can just see the result immediately.

> c(z,555,z)
[1]   1.10   9.00   3.14 555.00   1.10   9.00   3.14

| You nailed it! Good job!

  |=======================================                                   |  53%

| Numeric vectors can be used in arithmetic expressions. Type the following to see
| what happens: z * 2 + 100.

> 
> z * 2 + 100
[1] 102.20 118.00 106.28

| You are doing so well!

  |==========================================                                |  56%

| First, R multiplied each of the three elements in z by 2. Then it added 100 to
| each element to get the result you see above.

...

  |============================================                              |  59%

| Other common arithmetic operators are `+`, `-`, `/`, and `^` (where x^2 means 'x
| squared'). To take the square root, use the sqrt() function and to take the
| absolute value, use the abs() function.

...

  |==============================================                            |  62%

| Take the square root of z - 1 and assign it to a new variable called mySqrt.

> sqrt(z-1)
[1] 0.3162278 2.8284271 1.4628739

| Nice try, but that's not exactly what I was hoping for. Try again. Or, type
| info() for more options.

| Variable names are case-sensitive and you are creating a variable called mySqrt,
| so make sure the letter S is capitalized and everything else is lowercase.

> (z-1)^1/2
[1] 0.05 4.00 1.07

| You almost had it, but not quite. Try again. Or, type info() for more options.

| Variable names are case-sensitive and you are creating a variable called mySqrt,
| so make sure the letter S is capitalized and everything else is lowercase.

> mySqrt<-sqrt(z-1)

| You are quite good my friend!

  |=================================================                         |  66%

| Before we view the contents of the mySqrt variable, what do you think it
| contains?

1: a vector of length 0 (i.e. an empty vector)
2: a vector of length 3
3: a single number (i.e a vector of length 1)

Selection: 2

| That's correct!

  |===================================================                       |  69%

| Print the contents of mySqrt.

> mySqrt
[1] 0.3162278 2.8284271 1.4628739

| Excellent job!

  |=====================================================                     |  72%

| As you may have guessed, R first subtracted 1 from each element of z, then took
| the square root of each element. This leaves you with a vector of the same length
| as the original vector z.

...

  |========================================================                  |  75%

| Now, create a new variable called myDiv that gets the value of z divided by
| mySqrt.

> myDiv z/mySqrt
Error: unexpected symbol in "myDiv z"
> myDiv = z/mySqrt

| Not exactly. Give it another go. Or, type info() for more options.

| Enter myDiv <- z / mySqrt. The spaces on either side of the `/` sign are not
| required, but can often improve readability by making code appear less cluttered.
| In the end, it's personal preference.

> myDiv <- z / mySqrt

| Keep up the great work!

  |==========================================================                |  78%

| Which statement do you think is true?

1: The first element of myDiv is equal to the first element of z divided by the first element of mySqrt, and so on...
2: myDiv is undefined
3: myDiv is a single number (i.e a vector of length 1)

Selection: 1

| You are quite good my friend!

  |============================================================              |  81%

| Go ahead and print the contents of myDiv.

> myDiv
[1] 3.478505 3.181981 2.146460

| You are amazing!

  |==============================================================            |  84%

| When given two vectors of the same length, R simply performs the specified
| arithmetic operation (`+`, `-`, `*`, etc.) element-by-element. If the vectors are
| of different lengths, R 'recycles' the shorter vector until it is the same length
| as the longer vector.

...

  |=================================================================         |  88%

| When we did z * 2 + 100 in our earlier example, z was a vector of length 3, but
| technically 2 and 100 are each vectors of length 1.

...

  |===================================================================       |  91%

| Behind the scenes, R is 'recycling' the 2 to make a vector of 2s and the 100 to
| make a vector of 100s. In other words, when you ask R to compute z * 2 + 100,
| what it really computes is this: z * c(2, 2, 2) + c(100, 100, 100).

...

  |=====================================================================     |  94%

| To see another example of how this vector 'recycling' works, try adding c(1, 2,
| 3, 4) and c(0, 10). Don't worry about saving the result in a new variable.

> c(1,2,3,4)
[1] 1 2 3 4

| You almost had it, but not quite. Try again. Or, type info() for more options.

| Enter c(1, 2, 3, 4) + c(0, 10) in the console to see how R adds two vectors of
| different length. Don't assign the result to a variable.

> c(1,2,3,4) + c(0,10)
[1]  1 12  3 14

| You got it right!

  |========================================================================  |  97%

| If the length of the shorter vector does not divide evenly into the length of the
| longer vector, R will still apply the 'recycling' method, but will throw a
| warning to let you know something fishy might be going on.

...

  |==========================================================================| 100%

| Try c(1, 2, 3, 4) + c(0, 10, 100) for an example.

> c(1, 2, 3, 4) + c(0, 10, 100)
[1]   1  12 103   4
Warning message:
In c(1, 2, 3, 4) + c(0, 10, 100) :
  longer object length is not a multiple of shorter object length

| You are quite good my friend!