
Selection: 1



| Let's create a vector containing the numbers 1 through 20 using the `:` operator.
| Store the result in a variable called myVector.

> v <- 1:20

| You're close...I can feel it! Try it again. Or, type info() for more options.

| You learned about the `:` operator in the lesson on sequences. If you wanted to
| create a vector containing the numbers 1, 2, and 3 (in that order), you could use
| either c(1, 2, 3) or 1:3. In this case, we want the numbers 1 through 20 stored
| in a variable called myVector.

> myVector <- 1:20

| You got it right!

  |======                                                                    |   9%

| View the contents of the vector you just created.

> myVector
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20

| You are doing so well!

  |========                                                                  |  11%

| The dim() function tells us the 'dimensions' of an object. What happens if we do
| dim(myVector)? Give it try.

> dim(myVector)
NULL

| You nailed it! Good job!

  |===========                                                               |  14%

| Clearly, that's not very helpful! Since myVector is a vector, it doesn't have a
| `dim` attribute (so it's just NULL), but we can find its length using the
| length() function. Try that now.

> length(myVector)
[1] 20

| Excellent job!

  |=============                                                             |  17%

| Ah! That's what we wanted. But, what happens if we give myVector a `dim`
| attribute? Let's give it a try. Type dim(myVector) <- c(4, 5).

> dim(myVector)<- c(4,5)

| Excellent job!

  |===============                                                           |  20%

| It's okay if that last command seemed a little strange to you. It should! The
| dim() function allows you to get OR set the `dim` attribute for an R object. In
| this case, we assigned the value c(4, 5) to the `dim` attribute of myVector.

...

  |=================                                                         |  23%

| Use dim(myVector) to confirm that we've set the `dim` attribute correctly.

> dim(myVector)
[1] 4 5

| You are amazing!

  |===================                                                       |  26%

| Another way to see this is by calling the attributes() function on myVector. Try
| it now.

> attributes(myVector)
$dim
[1] 4 5


| Excellent job!

  |=====================                                                     |  29%

| Just like in math class, when dealing with a 2-dimensional object (think
| rectangular table), the first number is the number of rows and the second is the
| number of columns. Therefore, we just gave myVector 4 rows and 5 columns.

...

  |=======================                                                   |  31%

| But, wait! That doesn't sound like a vector any more. Well, it's not. Now it's a
| matrix. View the contents of myVector now to see what it looks like.

> myVector
     [,1] [,2] [,3] [,4] [,5]
[1,]    1    5    9   13   17
[2,]    2    6   10   14   18
[3,]    3    7   11   15   19
[4,]    4    8   12   16   20

| You are really on a roll!

  |=========================                                                 |  34%

| Now, let's confirm it's actually a matrix by using the class() function. Type
| class(myVector) to see what I mean.

> class(myVector)
[1] "matrix"

| That's correct!

  |===========================                                               |  37%

| Sure enough, myVector is now a matrix. We should store it in a new variable that
| helps us remember what it is. Store the value of myVector in a new variable
| called myMatrix.

> myMatrix <- myVector

| You are quite good my friend!

  |==============================                                            |  40%

| The example that we've used so far was meant to illustrate the point that a
| matrix is simply an atomic vector with a dimension attribute. A more direct
| method of creating the same matrix uses the matrix() function.

...

  |================================                                          |  43%

| Bring up the help file for the matrix() function now using the `?` function.

> ?matrix()

| Give it another try. Or, type info() for more options.

| The command ?matrix will do the trick.

> ?matrix

| Great job!

  |==================================                                        |  46%

| Now, look at the documentation for the matrix function and see if you can figure
| out how to create a matrix containing the same numbers (1-20) and dimensions (4
| rows, 5 columns) by calling the matrix() function. Store the result in a variable
| called myMatrix2.

> myMatrix2 <- matrix(1:20, nrow=4, ncol=5)

| You are really on a roll!

  |====================================                                      |  49%

| Finally, let's confirm that myMatrix and myMatrix2 are actually identical. The
| identical() function will tell us if its first two arguments are the same. Try it
| out.

> ?identical

| You almost had it, but not quite. Try again. Or, type info() for more options.

| If you're not sure about this one, then checkout the documentation for
| identical() using the `?` function.

> identical(myMatrix,myMatrix2)
[1] TRUE

| You are quite good my friend!

  |======================================                                    |  51%

| Now, imagine that the numbers in our table represent some measurements from a
| clinical experiment, where each row represents one patient and each column
| represents one variable for which measurements where taken.

...

  |========================================                                  |  54%

| We may want to label the rows, so that we know which numbers belong to each
| patient in the experiment. One way to do this is to add a column to the matrix,
| which contains the names of all four people.

...

  |==========================================                                |  57%

| Let's start by creating a character vector containing the names of our patients
| -- Bill, Gina, Kelly, and Sean. Remember that double quotes tell R that something
| is a character string. Store the result in a variable called patients.

> patients <-("Bill","Gina", "Kelly", "Sean")
Error: unexpected ',' in "patients <-("Bill","
> patients <- c("Bill","Gina", "Kelly", "Sean")

| That's correct!

  |============================================                              |  60%

| Now we'll use the cbind() function to 'combine columns'. Don't worry about
| storing the result in a new variable. Just call cbind() with two arguments -- the
| patients vector and myMatrix.

> cbind(patients, myMatrix)
     patients                       
[1,] "Bill"   "1" "5" "9"  "13" "17"
[2,] "Gina"   "2" "6" "10" "14" "18"
[3,] "Kelly"  "3" "7" "11" "15" "19"
[4,] "Sean"   "4" "8" "12" "16" "20"

| Excellent job!

  |===============================================                           |  63%

| Something is fishy about our result! It appears that combining the character
| vector with our matrix of numbers caused everything to be enclosed in double
| quotes. This means we're left with a matrix of character strings, which is no
| good.

...

  |=================================================                         |  66%

| If you remember back to the beginning of this lesson, I told you that matrices
| can only contain ONE class of data. Therefore, when we tried to combine a
| character vector with a numeric matrix, R was forced to 'coerce' the numbers to
| characters, hence the double quotes.

...

  |===================================================                       |  69%

| This is called 'implicit coersion', because we didn't ask for it. It just
| happened. But why didn't R just convert the names of our patients to numbers?
| I'll let you ponder that question on your own.

...

  |=====================================================                     |  71%

| So, we're still left with the question of how to include the names of our
| patients in the table without destroying the integrity of our numeric data. Try
| the following -- myData <- data.frame(patients, myMatrix)

> myData <- data.frame(patients, myMatrix)

| Nice work!

  |=======================================================                   |  74%

| Now view the contents of myData to see what we've come up with.

> myData
  patients X1 X2 X3 X4 X5
1     Bill  1  5  9 13 17
2     Gina  2  6 10 14 18
3    Kelly  3  7 11 15 19
4     Sean  4  8 12 16 20

| You are amazing!

  |=========================================================                 |  77%

| It looks like the data.frame() function allowed us to store our character vector
| of names right alongside our matrix of numbers. That's exactly what we were
| hoping for!

...

  |===========================================================               |  80%

| Behind the scenes, the data.frame() function takes any number of arguments and
| returns a single object of class `data.frame` that is composed of the original
| objects.

...

  |=============================================================             |  83%

| Let's confirm this by calling the class() function on our newly created data
| frame.

> class(myData)
[1] "data.frame"

| You nailed it! Good job!

  |===============================================================           |  86%

| It's also possible to assign names to the individual rows and columns of a data
| frame, which presents another possible way of determining which row of values in
| our table belongs to each patient.

...

  |==================================================================        |  89%

| However, since we've already solved that problem, let's solve a different problem
| by assigning names to the columns of our data frame so that we know what type of
| measurement each column represents.

...

  |====================================================================      |  91%

| Since we have six columns (including patient names), we'll need to first create a
| vector containing one element for each column. Create a character vector called
| cnames that contains the following values (in order) -- "patient", "age",
| "weight", "bp", "rating", "test".

> cnames <- c("patient", "age","weight", "bp", "rating", "test")

| Keep up the great work!

  |======================================================================    |  94%

| Now, use the colnames() function to set the `colnames` attribute for our data
| frame. This is similar to the way we used the dim() function earlier in this
| lesson.

> colnames(myData,cnames)
Error in is.data.frame(x) && do.NULL : invalid 'y' type in 'x && y'
> colnames(myData)<-cnames

| Keep up the great work!

  |========================================================================  |  97%

| Let's see if that got the job done. Print the contents of myData.

> myData
  patient age weight bp rating test
1    Bill   1      5  9     13   17
2    Gina   2      6 10     14   18
3   Kelly   3      7 11     15   19
4    Sean   4      8 12     16   20

| That's correct!

  |==========================================================================| 100%
